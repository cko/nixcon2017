{"schedule":{"conference":{"acronym":"nixcon2017","title":"NixCon 2017","start":"2017-10-28","end":"2017-10-29","daysCount":2,"timeslot_duration":"00:15","days":[{"index":1,"date":"2017-10-28","day_start":"2017-10-28T09:30:00+02:00","day_end":"2017-10-28T19:00:00+02:00","rooms":{"Unterwelt":[{"id":32,"guid":"f08e18cf-556d-4b8c-a517-12532d0fe190","logo":null,"date":"2017-10-28T09:30:00+02:00","start":"09:30","duration":"01:00","room":"Unterwelt","slug":"nixcon2017-32-breakfast","title":"Breakfast","subtitle":"","track":null,"type":"","language":"","abstract":"","description":"","recording_license":"","do_not_record":false,"persons":[],"links":[],"attachments":[]},{"id":28,"guid":"75b9eea1-f208-4c9b-b7c0-42e0f036f023","logo":null,"date":"2017-10-28T10:30:00+02:00","start":"10:30","duration":"00:15","room":"Unterwelt","slug":"nixcon2017-28-opening","title":"Opening","subtitle":"","track":null,"type":"","language":"","abstract":"","description":"","recording_license":"","do_not_record":false,"persons":[],"links":[],"attachments":[]},{"id":19,"guid":"4b038406-a272-492c-ad1e-526ce83d2777","logo":null,"date":"2017-10-28T10:45:00+02:00","start":"10:45","duration":"00:30","room":"Unterwelt","slug":"nixcon2017-19-releasing_nixos","title":"Releasing NixOS","subtitle":"History, Hummingbird, and Henceforth","track":null,"type":"lecture","language":"","abstract":"As the latest release managers, we will describe how NixOS releases have been done in the past and how we want to encourage the Nix community to participate in the release process. We are going to highlight some interesting new features of past releases and the then brand-new 17.09 'Hummingbird' release. Finally, we present you some ideas for features we would love to see implemented.","description":"We will give you an impression of the NixOS release process, how the release team works (RFC15) and your duties as release manager. Not to scare you away but to motivate you to step up as the next release manager.\r\n\r\nIn particular, we will give you an overview of promising features the community has suggested but remain to be implemented. Some of those are general service hardening with systemd, a new test-runner container backend for quicker service tests and the service abstraction layer to use NixOS service modules in Docker containers or swap init systems.","recording_license":"","do_not_record":false,"persons":[{"id":30,"public_name":"fpletz"},{"id":36,"public_name":"Robin Gloster"}],"links":[{"url":"https://www.youtube.com/watch?v=fdj9tzRaLn4\u0026index=1\u0026list=PLgknCdxP89ReQzhfKwMYjLdwWsc7us8ns","title":"Video"}],"attachments":[]},{"id":35,"guid":"057b18e3-e1f5-49d0-956b-1a66c447de84","logo":null,"date":"2017-10-28T11:15:00+02:00","start":"11:15","duration":"00:15","room":"Unterwelt","slug":"nixcon2017-35-break","title":"Break","subtitle":"","track":null,"type":"","language":"","abstract":"","description":"","recording_license":"","do_not_record":false,"persons":[],"links":[],"attachments":[]},{"id":7,"guid":"cada1f41-2fee-4dea-a2ba-9239244fe84b","logo":null,"date":"2017-10-28T11:30:00+02:00","start":"11:30","duration":"00:45","room":"Unterwelt","slug":"nixcon2017-7-quo_vadis_nixos","title":"Quo vadis, NixOS?","subtitle":"Let Us Become a Professional Distribution","track":null,"type":"lecture","language":"","abstract":"NixOS offers plenty of advanced technical features that make everyone's eyes shine with happiness: declarative system configuration, atomic upgrades, rollbacks, reproducible system configurations, multi-user package management, and so on and so forth. Basically, we rock! Many professional Linux users would love to have those capabilities available on their machines. Yet, professional users cannot make do without some rather basic features that NixOS lacks, like, offering specialized code paths for desktop users and server installations, binding customer service-level agreements, long-term support releases with regular maintenance updates for 3 years of longer, and -- last, but not least -- fast and reliable security updates. The purpose of this talk is to outline ways how we, as a community, might be able to improve upon that situation.","description":"For inspiration, I'd like to look at the way the openSUSE familiy of Linux distributions has organized its package ownership and development processes over the last ~15 years and contrast their structure to ours. The idea is not to copy blindly what others are doing, obviously, but to understand how they solved problems they've faced and what respective advantages and disadvantages these choices have. Based on that understanding, we can make informed choices for NixOS, too, that benefit from their experiences. Hopefully, this is going to spawn lively discussions and, ultimately, initiatives.","recording_license":"","do_not_record":false,"persons":[{"id":17,"public_name":"Peter Simons"}],"links":[],"attachments":[{"url":"/system/event_attachments/attachments/000/000/002/original/quo-vadis-nixos.pdf?1509186514","title":"Slides"}]},{"id":21,"guid":"dbb7a020-7130-40ee-aba2-77840b7b76ee","logo":null,"date":"2017-10-28T12:15:00+02:00","start":"12:15","duration":"00:45","room":"Unterwelt","slug":"nixcon2017-21-nixos_security","title":"NixOS Security","subtitle":"Vulnerability Roundup n+1","track":null,"type":"lecture","language":"","abstract":"NixOS is receiving more and more attention from users expecting up to date packages and timely security patches. Weekly \"catch-up\" issues were effective, but faltered after our datasource dried up.\r\n\r\nIn this talk we will explore the challenges and potential solutions around regular NixOS security patching, and how to join the famous \"-distro\" list.","description":"","recording_license":"","do_not_record":false,"persons":[{"id":31,"public_name":"Graham Christensen"}],"links":[{"url":"https://www.youtube.com/watch?v=6esAi2OxULo\u0026index=2\u0026list=PLgknCdxP89ReQzhfKwMYjLdwWsc7us8ns","title":"Video"}],"attachments":[{"url":"/system/event_attachments/attachments/000/000/010/original/security.pdf?1510084582","title":"Slides"}]},{"id":30,"guid":"bc761c4e-f2c0-4f0f-bdb2-dda5e71ad195","logo":null,"date":"2017-10-28T13:00:00+02:00","start":"13:00","duration":"01:15","room":"Unterwelt","slug":"nixcon2017-30-lunch_break","title":"Lunch Break","subtitle":"","track":null,"type":"","language":"","abstract":"","description":"","recording_license":"","do_not_record":false,"persons":[],"links":[],"attachments":[]},{"id":16,"guid":"2fe0dfad-6977-4f75-9485-05d99c2191ce","logo":null,"date":"2017-10-28T14:15:00+02:00","start":"14:15","duration":"00:45","room":"Unterwelt","slug":"nixcon2017-16-test_all_the_things","title":"Test ALL the Things","subtitle":"On improving the nixpkgs testing story","track":null,"type":"lecture","language":"","abstract":"While there is pretty good support for testing NixOS based services inside VMs, the same doesn’t hold for large parts of nixpkgs, especially for testing packages. I will present different approaches to improve testing.","description":"\u003cp\u003eOver the last year I have been creating various testing environments, tried out different approaches and created tests for various parts of nixpkgs, notably package tests with very interesting properties.\u003c/p\u003e\r\n\r\n\u003cp\u003eThere are two kinds of tests in nixpkgs right now:\r\n\u003col\u003e\r\n\u003cli\u003e\u003ccode\u003e/lib/tests\u003c/code\u003e: this is essentially a derivation that tests (some/most) library functions by checking their outputs.\u003c/li\u003e\r\n\u003cli\u003e\u003ccode\u003e/nixos/tests\u003c/code\u003e: contains a list of tests for modules that use the VM testing infrastructure (`/nixos/tests/make-test.nix`).\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003c/p\u003e\r\n\r\n\u003cp\u003eBoth kinds of tests live in a different part of the codebase than the implementations they test, and have to be run separately, and manually (by hand or by CI). This leads to easy desynchronization of test- and actual implementation—the tests bit-rot over time.\u003cp\u003e\r\n\r\n\u003cp\u003eI therefore propose two maxims:\r\n\u003col\u003e\r\n\u003cli\u003eAll testing code should be as close to the implementation code as possible.\u003c/li\u003e\r\n\u003cli\u003eChanging the implementation should not be possible without adjusting the testing code to make it pass.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003c/p\u003e\r\n\r\n\u003cp\u003eComing from this angle, I recognized that a unique property of nix evaluation—short runtime—makes it possible to let nix packages depend on their tests. This is accomplished by a `seq` for derivations, discovered with @aszlig.\u003c/p\u003e\r\n\r\n\u003cp\u003eI will present how \u003ccode\u003edrvSeq\u003c/code\u003e makes it possible to create package tests that are able to use the full power of the nix language for abstraction. It also does not cause unnecessary recompilation, like changing the \u003ccode\u003echeckPhase\u003c/code\u003e does right now.\u003cbr/\u003e\r\nGoing further, I will discuss best practices for including these tests into already existing packages.\u003c/p\u003e\r\n\r\n\u003cp\u003eAs well as packages, functions (and thereby whole language frameworks) can be tested as well, enabling a kind of testing that is automatically done to every usage of the function (i.e. every package in the framework). This could lead to interesting use cases.\u003c/p\u003e\r\n\r\n\r\n\u003cp\u003eWhile VM tests already work with automatic CI support, their code location is not satisfying according to maxim 1. I will propose an integrations of VM tests as a module option, producing outputs neatly piecing into the current hydra setup.\u003c/p\u003e","recording_license":"","do_not_record":false,"persons":[{"id":22,"public_name":"Profpatsch"}],"links":[{"url":"http://profpatsch.de/talks/nix/nixpkgs-tests","title":"Slides"},{"url":"https://www.youtube.com/watch?v=5Z7IckV6gao\u0026index=14\u0026list=PLgknCdxP89ReQzhfKwMYjLdwWsc7us8ns","title":"Video"}],"attachments":[]},{"id":13,"guid":"891c2357-d1b6-442d-bac9-ea56608d8845","logo":null,"date":"2017-10-28T15:00:00+02:00","start":"15:00","duration":"00:45","room":"Unterwelt","slug":"nixcon2017-13-nixpkgs_overlays","title":"Nixpkgs Overlays","subtitle":"A place for all excluded packages","track":null,"type":"lecture","language":"","abstract":"For many reasons, Nixpkgs cannot accept every package ever created.  Things have to change, let's make sure we can at least include every package, even if they are not part of our central repository!\r\n","description":"Since December 25th 2016, we are now able to use Overlays.  Overlays gives us the ability to change the way Nixpkgs see the world, while providing most of the benefits that we can get from it.\r\n\r\nThis presentation will address the following questions:\r\n\r\nWhy overlays are useful, across a community, across an organization, or across the world?\r\n\r\nHow to write an overlay with a few good and bad examples, and digging in the internals of Nixpkgs to understand how overlays are working?\r\n\r\nWhat can we do to improve the usage of overlay even more? What parts of Nixpkgs should be converted into overlays?\r\n","recording_license":"","do_not_record":false,"persons":[{"id":26,"public_name":"Nicolas B. Pierron"}],"links":[{"url":"http://nbp.github.io/slides/NixCon/2017.NixpkgsOverlays/","title":"Nixpkgs Overlays - Slides"},{"url":"https://www.youtube.com/watch?v=W85mF1zWA2o\u0026index=13\u0026list=PLgknCdxP89ReQzhfKwMYjLdwWsc7us8ns","title":"Video"}],"attachments":[]},{"id":36,"guid":"69d56eef-4d75-4dad-9010-ded9ecd9b039","logo":null,"date":"2017-10-28T15:45:00+02:00","start":"15:45","duration":"00:15","room":"Unterwelt","slug":"nixcon2017-36-break","title":"Break","subtitle":"","track":null,"type":"","language":"","abstract":"","description":"","recording_license":"","do_not_record":false,"persons":[],"links":[],"attachments":[]},{"id":14,"guid":"81a3783a-d283-49ce-a703-fadb89fe3fd1","logo":null,"date":"2017-10-28T16:00:00+02:00","start":"16:00","duration":"00:15","room":"Unterwelt","slug":"nixcon2017-14-nixup","title":"NixUP","subtitle":"State and Future of a Nix-Managed User Profile","track":null,"type":"lecture","language":"","abstract":"Nix User Profile (NixUP) should have been a declarative configuration for the user environment [1]. By now similar solutions have emerged, like nix-home [2] or home-manager [3]. In this talk the different approaches will be reviewed and an update on the state and future of NixUP will be given.\r\n\r\n[1] https://github.com/NixOS/nixpkgs/pull/9250\r\n[2] https://github.com/sheenobu/nix-home\r\n[3] https://github.com/rycee/home-manager","description":"","recording_license":"","do_not_record":false,"persons":[{"id":27,"public_name":"Thomas Strobel"}],"links":[{"url":"https://www.youtube.com/watch?v=RpuUrORZr-M\u0026index=3\u0026list=PLgknCdxP89ReQzhfKwMYjLdwWsc7us8ns","title":"Video"}],"attachments":[{"url":"/system/event_attachments/attachments/000/000/006/original/NixUP_--_Thomas_Strobel.pdf?1509899433","title":"Slides"}]},{"id":27,"guid":"4d8622da-917c-4171-986a-8f1f5cca3b78","logo":null,"date":"2017-10-28T16:15:00+02:00","start":"16:15","duration":"00:30","room":"Unterwelt","slug":"nixcon2017-27-nix_1_12","title":"Nix 1.12","subtitle":"","track":null,"type":"","language":"","abstract":"In this talk I will give an overview of the new features in Nix 1.12, and the ongoing work on the \"nix\" command intended to replace the existing command-line interface.","description":"","recording_license":"","do_not_record":false,"persons":[{"id":35,"public_name":"Eelco Dolstra"}],"links":[{"url":"https://www.youtube.com/watch?v=XVIKScU7Uf4\u0026index=4\u0026list=PLgknCdxP89ReQzhfKwMYjLdwWsc7us8ns","title":"Video"}],"attachments":[{"url":"/system/event_attachments/attachments/000/000/004/original/talk.pdf?1509289391","title":"Slides"}]},{"id":8,"guid":"464c1562-36e7-46b6-aba3-7c5366e9b7c2","logo":null,"date":"2017-10-28T16:45:00+02:00","start":"16:45","duration":"00:45","room":"Unterwelt","slug":"nixcon2017-8-a_type-system_for_nix","title":"A type-system for Nix","subtitle":"","track":null,"type":"lecture","language":"","abstract":"We present here the new \u003cem\u003etix\u003c/em\u003e tool, a type-checker for the Nix language whose goal is to make nix code easier to write and maintain.","description":"Nix's strength comes from the ideas it borrows from functional programming: immutability, powerful abstraction capabilities, etc.., yet it misses one of the most emblematic and powerful feature of most functional programming languages: a strong static type-system, which becomes a problem given the increasing size of the Nix package collection. This proposal (which is the result of an internship funded by the Nix community and tweag I/O and supervised by Guiseppe Castagna) tries to fix this.\r\n\u003cp\u003eThe resulting type-system and typechecker have been designed with two very important constraints in mind:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003cp\u003eThe type-system must be able to offer as much safety as possible for the programmer.\u003c/p\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cp\u003eOne must be able to reuse existing nix code with as few modifications as possible. This means that:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eMost of Nix idioms have to be supported by the type-system − in particular the presence of types at runtime and the dynamic fields in the records,\u003c/li\u003e\r\n\u003cli\u003eThere must be ways to bypass − up to some extent − the type-system, using e.g. gradual typing or by locally disabling certain errors.\u003c/li\u003e\r\n\u003c/ul\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\r\n\u003cp\u003eIn this talk, we will present the tool from the practical point of view of the nix user and discuss further improvements\u003c/p\u003e.","recording_license":"","do_not_record":false,"persons":[{"id":18,"public_name":"Théophane Hufschmitt"}],"links":[{"url":"https://typing-nix.regnat.ovh","title":"Blog"},{"url":"https://github.com/regnat/tix","title":"Sources of the implementation"},{"url":"https://github.com/regnat/tix-paper","title":"Work notes"},{"url":"https://www.youtube.com/watch?v=79dL7HgmW_k\u0026index=5\u0026list=PLgknCdxP89ReQzhfKwMYjLdwWsc7us8ns","title":"Video"}],"attachments":[{"url":"/system/event_attachments/attachments/000/000/003/original/main.pdf?1509274727","title":"sildes"}]}]}},{"index":2,"date":"2017-10-29","day_start":"2017-10-29T09:30:00+01:00","day_end":"2017-10-29T18:00:00+01:00","rooms":{"Unterwelt":[{"id":33,"guid":"999dacc7-90e0-4c01-9200-ae57c996751c","logo":null,"date":"2017-10-29T09:30:00+01:00","start":"09:30","duration":"01:00","room":"Unterwelt","slug":"nixcon2017-33-breakfast","title":"Breakfast","subtitle":"","track":null,"type":"","language":"","abstract":"","description":"","recording_license":"","do_not_record":false,"persons":[],"links":[],"attachments":[]},{"id":10,"guid":"2889734e-c85c-4dfa-a0fa-0994e35496fb","logo":null,"date":"2017-10-29T10:30:00+01:00","start":"10:30","duration":"00:30","room":"Unterwelt","slug":"nixcon2017-10-managing_python_environments_with_pypi2nix","title":"Managing Python Environments with pypi2nix","subtitle":"","track":null,"type":"","language":"","abstract":"This talk wants to give an overview over the usage and development of pypi2nix, a tool to generate and maintain python environments with nix.\r\n","description":"pypi2nix is already a viable tool to generate and manage python environments with their respective dependencies inside of nix.  The first part of this talk will be focused on the current functionality of it.  This includes features and shortcomings.\r\n\r\nThe second part of the talk is about nixpkgs-python and how we use pypi2nix to maintain semi-automated self-updating sets of python packages.\r\n\r\nFinally we will discuss how pypi2nix could be used to maintain python package sets inside of nixpkgs in the future.\r\n","recording_license":"","do_not_record":false,"persons":[{"id":16,"public_name":"Sebastian Jordan"}],"links":[{"url":"https://github.com/garbas/pypi2nix","title":"garbas/pypi2nix"},{"url":"https://github.com/garbas/nixpkgs-python","title":"garbas/nixpkgs-python"},{"url":"https://www.youtube.com/watch?v=ezb6a1_dtzQ\u0026index=6\u0026list=PLgknCdxP89ReQzhfKwMYjLdwWsc7us8ns","title":"Video"}],"attachments":[]},{"id":23,"guid":"a9b99ef2-d1e9-4227-95ba-2cf2a9928c20","logo":null,"date":"2017-10-29T11:00:00+01:00","start":"11:00","duration":"00:45","room":"Unterwelt","slug":"nixcon2017-23-nix_on_darwin","title":"Nix on Darwin","subtitle":"History, challenges, and where it's going","track":null,"type":"lecture","language":"","abstract":"For the past couple of years, Darwin has been a first-class \"pure\" platform on Nix. In this talk I'll describe the many hurdles we've had to overcome to get from an impure poorly supported platform to where we are today. I'll also cover ongoing pain points and where we see the platform going, and why I think it should take over the Mac packaging ecosystem.\r\n","description":"When I first encountered Nix, I was simultaneously impressed by the purity of its Linux environment with virtually no untracked external dependencies, and disappointed with the situation on macOS. On macOS, some of my first experiences with Nix involved some painful surprises of impurities breaking my Nix builds, and my early attempts to fix them largely failed.\r\n\r\nAs I tinkered with Nix and spoke to experts online, a clearer picture emerged for how to move from the impure situation to a pure one, and a few of us banded together on IRC over the following few months to bootstrap a pure compiler toolchain and OS-appropriate SDK from scratch. It's a grueling story of mass rebuilds multiple times a day, repeatedly waiting for three hours just to find stupid typos, and hunting down undesired dependency chains, but in the end it came together and actually worked, much to everyone's surprise.\r\n\r\nAlthough the situation is now far better than it was, there is still much work to do, and I'll go over some of the root causes of much of the remaining pain and how I propose to tackle it. I'll also go over some exciting recent developments in the macOS Nix space and what I think the project and platform will look like in the longer term.","recording_license":"","do_not_record":false,"persons":[{"id":32,"public_name":"Dan Peebles"}],"links":[{"url":"https://www.youtube.com/watch?v=73mnPBLL_20\u0026index=7\u0026list=PLgknCdxP89ReQzhfKwMYjLdwWsc7us8ns","title":"Video"}],"attachments":[{"url":"/system/event_attachments/attachments/000/000/005/original/without-notes.pdf?1509312309","title":"Slides"}]},{"id":37,"guid":"59a44a2b-e000-4751-a83f-ede8204c358c","logo":null,"date":"2017-10-29T11:45:00+01:00","start":"11:45","duration":"00:15","room":"Unterwelt","slug":"nixcon2017-37-break","title":"Break","subtitle":"","track":null,"type":"","language":"","abstract":"","description":"","recording_license":"","do_not_record":false,"persons":[],"links":[],"attachments":[]},{"id":34,"guid":"20ab8ceb-80d4-41e7-abca-1e139abb39cb","logo":null,"date":"2017-10-29T12:00:00+01:00","start":"12:00","duration":"00:45","room":"Unterwelt","slug":"nixcon2017-34-impact_of_nix_installation_quality_on_linux","title":"Impact of Nix installation quality on Linux","subtitle":"","track":null,"type":"","language":"","abstract":"\u003cul\u003e\r\n\u003cli\u003eCurrent state on Nix install on Linux.\u003c/li\u003e\r\n\u003cli\u003eWhat Linux users and professionals in Nix* world experience first. And what first impression they get.\u003c/li\u003e\r\n\u003cli\u003eDemonstration of more polished installation process that submitted upstream.\u003c/li\u003e\r\n\u003cli\u003ePicture of competitive technologies for today. Snap, Docker, Kubernetes, Ansible, Terraform. Thay solve the same problems but in more clunkier way, we need to hurry up before last puzzle peace - Snap, goes into place (becomes stable enough for business) in 8-9 month.\u003c/li\u003e\r\n\u003cli\u003eDescription of why Snap is a clever lockdown.\u003c/li\u003e\r\n\u003cli\u003eWe should get Linux community and marketshare before Snap takes everything. Lets invade enthusiasts and business with Nix and NixPkgs solution.\u003c/li\u003e\r\n\u003cli\u003eImportance of integration in Linux tech world and community. And what Linux going to get, what bussiness would get. And what the whole Nix* ecosystem would greatly benefit from.\u003c/li\u003e\r\n\u003cli\u003eCall to help merge, to collaborate, to take ideas, code. Because author cares only to spread Nix in Linux more, before Snap would seize the whole market and technologies that are widely used - become complette stack and become \"good enough\" without any involvement of Nix* in the market.\u003c/li\u003e\r\n\u003c/ul\u003e","description":"","recording_license":"","do_not_record":false,"persons":[{"id":39,"public_name":"Anton Latukha"}],"links":[{"url":"https://docs.google.com/presentation/d/1Ed4FA9lOvIMEVFcz9PrjbqIelRX9Rg7W-B_Ep_SFfhQ/edit?ts=59f8543b#slide=id.p","title":"Slides"}],"attachments":[]},{"id":25,"guid":"34e22c69-11ac-4e11-9438-98e596ce9969","logo":null,"date":"2017-10-29T12:45:00+01:00","start":"12:45","duration":"00:15","room":"Unterwelt","slug":"nixcon2017-25-lightning_talks","title":"Lightning Talks","subtitle":"","track":null,"type":"","language":"","abstract":"\r\n\u003cb\u003eVulnix by Christian Kauhaus\u003c/b\u003e","description":"","recording_license":"","do_not_record":false,"persons":[],"links":[],"attachments":[]},{"id":31,"guid":"5083b8c8-3fba-403b-9776-6ad291fb3a40","logo":null,"date":"2017-10-29T13:00:00+01:00","start":"13:00","duration":"01:15","room":"Unterwelt","slug":"nixcon2017-31-lunch_break","title":"Lunch Break","subtitle":"","track":null,"type":"","language":"","abstract":"","description":"","recording_license":"","do_not_record":false,"persons":[],"links":[],"attachments":[]},{"id":39,"guid":"4a7d0bbf-4213-4191-a777-ffea17a385b6","logo":null,"date":"2017-10-29T14:15:00+01:00","start":"14:15","duration":"00:15","room":"Unterwelt","slug":"nixcon2017-39-p2p_nixos_infrastructure","title":"P2P NixOS Infrastructure","subtitle":"","track":null,"type":"","language":"","abstract":"NixOS allows developers to build their application from components. This presentation suggests a p2p protocol for selective distribution nixos components: binary, source code packages and or even their git repositories.","description":"","recording_license":"","do_not_record":false,"persons":[{"id":38,"public_name":"Jan Troler"}],"links":[],"attachments":[{"url":"/system/event_attachments/attachments/000/000/015/original/hashsync_tutorial.html?1520352891","title":"Notes"}]},{"id":18,"guid":"7c0bc07c-5977-4254-9a3f-72d5c95d1169","logo":null,"date":"2017-10-29T14:30:00+01:00","start":"14:30","duration":"00:45","room":"Unterwelt","slug":"nixcon2017-18-incremental_package_builds","title":"Incremental package builds","subtitle":"","track":null,"type":"lecture","language":"","abstract":"The current CI infrastructure around nixpkgs has difficulties to build the whole package set in due time. While there were attempts to build every pull requests, these are not enabled by default because it requires even more resources. We will explore how to optimize even more the build process to meet the size of nixpkgs.\r\n\r\nWe will survey with state-of-the-art build systems like scons, bazel and tup to see how we could improve incremental builds in nix. Based on nix-make, we will describe how nix could cooperate with the build tool of a given package to bring incremental builds at a finer granularity. In particular, we will explore how the intensional store model (as used by bazel for example) could help avoiding some mass rebuilds.","description":"","recording_license":"","do_not_record":false,"persons":[{"id":24,"public_name":"Guillaume Maudoux (layus)"}],"links":[{"url":"https://bazel.build","title":"Bazel"},{"url":"https://gittup.org/tup/","title":"Tup"},{"url":"https://github.com/edolstra/nix-make","title":"Nix-Make"},{"url":"https://www.youtube.com/watch?v=AED-dgCa9GU\u0026index=8\u0026list=PLgknCdxP89ReQzhfKwMYjLdwWsc7us8ns","title":"Video"}],"attachments":[{"url":"/system/event_attachments/attachments/000/000/014/original/slides-builds.pdf?1510089917","title":"Slides"}]},{"id":11,"guid":"fa16f403-c4b7-4ac8-909e-cd3558870a20","logo":null,"date":"2017-10-29T15:15:00+01:00","start":"15:15","duration":"00:30","room":"Unterwelt","slug":"nixcon2017-11-sneaking_nix_at_work","title":"Sneaking Nix at $work","subtitle":"and become a hero, hopefully","track":null,"type":"","language":"","abstract":"This talk explores ways to introduce Nix into an existing infrastructure (at  work), based on real-life experience.","description":"","recording_license":"","do_not_record":false,"persons":[{"id":23,"public_name":"zimbatm"}],"links":[{"url":"https://docs.google.com/presentation/d/1A2ouC2CxxnS6Nl2hn-lMH9ktgoqIU7yJabQvX0QmqaE/edit#slide=id.gd9c453428_0_16","title":"Slides"},{"url":"https://www.youtube.com/watch?v=ycjlpg296iI\u0026index=9\u0026list=PLgknCdxP89ReQzhfKwMYjLdwWsc7us8ns","title":"Video"}],"attachments":[]},{"id":38,"guid":"16a8901a-069b-4f0a-96a1-2f667603876e","logo":null,"date":"2017-10-29T15:45:00+01:00","start":"15:45","duration":"00:15","room":"Unterwelt","slug":"nixcon2017-38-break","title":"Break","subtitle":"","track":null,"type":"","language":"","abstract":"","description":"","recording_license":"","do_not_record":false,"persons":[],"links":[],"attachments":[]},{"id":20,"guid":"6d42bc16-57ae-4f50-af79-35ffe0421e8a","logo":null,"date":"2017-10-29T16:00:00+01:00","start":"16:00","duration":"00:30","room":"Unterwelt","slug":"nixcon2017-20-nixos_at_tumblr","title":"NixOS at Tumblr","subtitle":"","track":null,"type":"","language":"","abstract":"Infrastructure automation testing is hard, but NixOS makes it a breeze. Using NixOS' testing framework, Tumblr developed a comprehensive integration test suite for Jetpants, Tumblr's database automation toolkit designed to manage billions of rows and hundreds of database machines.\r\n\r\nIn this talk we will explore the challenges of testing Jetpants, mimicking complex replication and sharding topologies, and future applications of NixOS at Tumblr.","description":"","recording_license":"","do_not_record":false,"persons":[{"id":31,"public_name":"Graham Christensen"}],"links":[{"url":"https://www.youtube.com/watch?v=6VH945-AaRY\u0026index=10\u0026list=PLgknCdxP89ReQzhfKwMYjLdwWsc7us8ns","title":"Video"}],"attachments":[{"url":"/system/event_attachments/attachments/000/000/012/original/NixCON_2017_-_Tumblr.pdf?1510084724","title":"Slides"}]},{"id":26,"guid":"d426052e-a733-403e-a838-45bc3a7ef2d0","logo":null,"date":"2017-10-29T16:30:00+01:00","start":"16:30","duration":"00:30","room":"Unterwelt","slug":"nixcon2017-26-using_nix_in_production_for_the_last_two_years","title":"Using Nix in production for the last two years","subtitle":"","track":null,"type":"","language":"","abstract":"Talk with go through lessons learned using Nix in last two years to automate software distribution.\r\nWhat are the common technical and process obstacles using Nix to ship software in production - mean that customers depend on the pipeline.\r\nWhat supportive tools and Nix features were used, what Nix features aren't useful, where do I see improvements are needed.\r\nWhat do I see as something that will boost Nix usage in companies and what's my plan to get there.","description":"","recording_license":"","do_not_record":false,"persons":[{"id":34,"public_name":"Domen Kožar"}],"links":[{"url":"https://www.youtube.com/watch?v=dlRuMdm6pRU\u0026index=11\u0026list=PLgknCdxP89ReQzhfKwMYjLdwWsc7us8ns","title":"Video"}],"attachments":[{"url":"/system/event_attachments/attachments/000/000/007/original/nixconf2017.pdf?1510045203","title":"Slides"}]},{"id":22,"guid":"828f3e09-0539-489b-bdc8-6ef83c10969c","logo":"/system/events/logos/000/000/022/large/logo-donker.png?1501537794","date":"2017-10-29T17:00:00+01:00","start":"17:00","duration":"00:30","room":"Unterwelt","slug":"nixcon2017-22-nix_at_lumiguide","title":"Nix at LumiGuide","subtitle":"","track":null,"type":"podium","language":"","abstract":"LumiGuide develops and maintains bicycle and car parking guidance systems that are deployed in various cities in the Netherlands and abroad. To run this system a number of different machines are needed: image analysis servers deployed locally in facilities, central web-servers and support servers in data centers, embedded machines like Raspberry Pi's and ARM FPGA's to power our various displays in facilities and on the streets. Finally our engineers have workstation to write our software. \r\n\r\nAll these machines need to be developed, tested, provisioned, configured, installed and rolled back (in case we make a mistake). Since we don't have a dedicated sys-admin we rely on automation to do most of these tasks. We use the Nix ecosystem of tools to help us with that.\r\n\r\nI will talk about how we've structured our mono-repository, how we make sure each engineer uses the exact same version of nixpkgs and the exact same NixOS configuration, how we override our Haskell packages, how we use Continuous Integration wit hydra and how we deploy our machines using nixops.\r\n\r\nFinally I will also talk about the things that we don't like about the Nix ecosystem.","description":"","recording_license":"","do_not_record":false,"persons":[{"id":12,"public_name":"Bas van Dijk"}],"links":[{"url":"https://www.youtube.com/watch?v=J4DgATIjx9E\u0026index=12\u0026list=PLgknCdxP89ReQzhfKwMYjLdwWsc7us8ns","title":"Video"}],"attachments":[]},{"id":29,"guid":"65813142-5652-4123-9c0b-ffda8dbba4ee","logo":null,"date":"2017-10-29T17:30:00+01:00","start":"17:30","duration":"00:15","room":"Unterwelt","slug":"nixcon2017-29-closing","title":"Closing","subtitle":"","track":null,"type":"","language":"","abstract":"","description":"","recording_license":"","do_not_record":false,"persons":[],"links":[],"attachments":[]}]}}]}}}